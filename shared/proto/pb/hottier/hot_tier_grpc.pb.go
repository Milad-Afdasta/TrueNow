// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/hot_tier.proto

package hottier

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HotTier_ApplyBatch_FullMethodName = "/hottier.HotTier/ApplyBatch"
	HotTier_Query_FullMethodName      = "/hottier.HotTier/Query"
	HotTier_GetStats_FullMethodName   = "/hottier.HotTier/GetStats"
)

// HotTierClient is the client API for HotTier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// HotTier service provides real-time aggregation and query capabilities
type HotTierClient interface {
	// Apply a batch of events to the hot tier
	ApplyBatch(ctx context.Context, in *ApplyBatchRequest, opts ...grpc.CallOption) (*ApplyBatchResponse, error)
	// Query aggregated data
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// Get statistics about the hot tier
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
}

type hotTierClient struct {
	cc grpc.ClientConnInterface
}

func NewHotTierClient(cc grpc.ClientConnInterface) HotTierClient {
	return &hotTierClient{cc}
}

func (c *hotTierClient) ApplyBatch(ctx context.Context, in *ApplyBatchRequest, opts ...grpc.CallOption) (*ApplyBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyBatchResponse)
	err := c.cc.Invoke(ctx, HotTier_ApplyBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotTierClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, HotTier_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotTierClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, HotTier_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotTierServer is the server API for HotTier service.
// All implementations must embed UnimplementedHotTierServer
// for forward compatibility.
//
// HotTier service provides real-time aggregation and query capabilities
type HotTierServer interface {
	// Apply a batch of events to the hot tier
	ApplyBatch(context.Context, *ApplyBatchRequest) (*ApplyBatchResponse, error)
	// Query aggregated data
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	// Get statistics about the hot tier
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	mustEmbedUnimplementedHotTierServer()
}

// UnimplementedHotTierServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHotTierServer struct{}

func (UnimplementedHotTierServer) ApplyBatch(context.Context, *ApplyBatchRequest) (*ApplyBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyBatch not implemented")
}
func (UnimplementedHotTierServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedHotTierServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedHotTierServer) mustEmbedUnimplementedHotTierServer() {}
func (UnimplementedHotTierServer) testEmbeddedByValue()                 {}

// UnsafeHotTierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotTierServer will
// result in compilation errors.
type UnsafeHotTierServer interface {
	mustEmbedUnimplementedHotTierServer()
}

func RegisterHotTierServer(s grpc.ServiceRegistrar, srv HotTierServer) {
	// If the following call pancis, it indicates UnimplementedHotTierServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HotTier_ServiceDesc, srv)
}

func _HotTier_ApplyBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotTierServer).ApplyBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotTier_ApplyBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotTierServer).ApplyBatch(ctx, req.(*ApplyBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotTier_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotTierServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotTier_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotTierServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotTier_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotTierServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotTier_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotTierServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HotTier_ServiceDesc is the grpc.ServiceDesc for HotTier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HotTier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hottier.HotTier",
	HandlerType: (*HotTierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyBatch",
			Handler:    _HotTier_ApplyBatch_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _HotTier_Query_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _HotTier_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hot_tier.proto",
}
