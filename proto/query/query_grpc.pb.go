// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: query.proto

package query

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QueryService_ExecuteQuery_FullMethodName  = "/truenow.query.QueryService/ExecuteQuery"
	QueryService_StreamQuery_FullMethodName   = "/truenow.query.QueryService/StreamQuery"
	QueryService_ExplainQuery_FullMethodName  = "/truenow.query.QueryService/ExplainQuery"
	QueryService_GetSchema_FullMethodName     = "/truenow.query.QueryService/GetSchema"
	QueryService_GetQueryStats_FullMethodName = "/truenow.query.QueryService/GetQueryStats"
	QueryService_CancelQuery_FullMethodName   = "/truenow.query.QueryService/CancelQuery"
)

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// QueryService handles analytics queries across the hot tier
type QueryServiceClient interface {
	// Execute a query
	ExecuteQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// Stream query results for large datasets
	StreamQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryResult], error)
	// Get query execution plan
	ExplainQuery(ctx context.Context, in *ExplainQueryRequest, opts ...grpc.CallOption) (*ExplainQueryResponse, error)
	// Get available tables and schemas
	GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error)
	// Get query statistics
	GetQueryStats(ctx context.Context, in *GetQueryStatsRequest, opts ...grpc.CallOption) (*QueryStatsResponse, error)
	// Cancel a running query
	CancelQuery(ctx context.Context, in *CancelQueryRequest, opts ...grpc.CallOption) (*CancelQueryResponse, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) ExecuteQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, QueryService_ExecuteQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) StreamQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QueryService_ServiceDesc.Streams[0], QueryService_StreamQuery_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryRequest, QueryResult]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QueryService_StreamQueryClient = grpc.ServerStreamingClient[QueryResult]

func (c *queryServiceClient) ExplainQuery(ctx context.Context, in *ExplainQueryRequest, opts ...grpc.CallOption) (*ExplainQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExplainQueryResponse)
	err := c.cc.Invoke(ctx, QueryService_ExplainQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSchemaResponse)
	err := c.cc.Invoke(ctx, QueryService_GetSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetQueryStats(ctx context.Context, in *GetQueryStatsRequest, opts ...grpc.CallOption) (*QueryStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryStatsResponse)
	err := c.cc.Invoke(ctx, QueryService_GetQueryStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CancelQuery(ctx context.Context, in *CancelQueryRequest, opts ...grpc.CallOption) (*CancelQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelQueryResponse)
	err := c.cc.Invoke(ctx, QueryService_CancelQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
// All implementations must embed UnimplementedQueryServiceServer
// for forward compatibility.
//
// QueryService handles analytics queries across the hot tier
type QueryServiceServer interface {
	// Execute a query
	ExecuteQuery(context.Context, *QueryRequest) (*QueryResponse, error)
	// Stream query results for large datasets
	StreamQuery(*QueryRequest, grpc.ServerStreamingServer[QueryResult]) error
	// Get query execution plan
	ExplainQuery(context.Context, *ExplainQueryRequest) (*ExplainQueryResponse, error)
	// Get available tables and schemas
	GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error)
	// Get query statistics
	GetQueryStats(context.Context, *GetQueryStatsRequest) (*QueryStatsResponse, error)
	// Cancel a running query
	CancelQuery(context.Context, *CancelQueryRequest) (*CancelQueryResponse, error)
	mustEmbedUnimplementedQueryServiceServer()
}

// UnimplementedQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServiceServer struct{}

func (UnimplementedQueryServiceServer) ExecuteQuery(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteQuery not implemented")
}
func (UnimplementedQueryServiceServer) StreamQuery(*QueryRequest, grpc.ServerStreamingServer[QueryResult]) error {
	return status.Errorf(codes.Unimplemented, "method StreamQuery not implemented")
}
func (UnimplementedQueryServiceServer) ExplainQuery(context.Context, *ExplainQueryRequest) (*ExplainQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExplainQuery not implemented")
}
func (UnimplementedQueryServiceServer) GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (UnimplementedQueryServiceServer) GetQueryStats(context.Context, *GetQueryStatsRequest) (*QueryStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryStats not implemented")
}
func (UnimplementedQueryServiceServer) CancelQuery(context.Context, *CancelQueryRequest) (*CancelQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelQuery not implemented")
}
func (UnimplementedQueryServiceServer) mustEmbedUnimplementedQueryServiceServer() {}
func (UnimplementedQueryServiceServer) testEmbeddedByValue()                      {}

// UnsafeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServiceServer will
// result in compilation errors.
type UnsafeQueryServiceServer interface {
	mustEmbedUnimplementedQueryServiceServer()
}

func RegisterQueryServiceServer(s grpc.ServiceRegistrar, srv QueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QueryService_ServiceDesc, srv)
}

func _QueryService_ExecuteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ExecuteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_ExecuteQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ExecuteQuery(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_StreamQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServiceServer).StreamQuery(m, &grpc.GenericServerStream[QueryRequest, QueryResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QueryService_StreamQueryServer = grpc.ServerStreamingServer[QueryResult]

func _QueryService_ExplainQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplainQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ExplainQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_ExplainQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ExplainQuery(ctx, req.(*ExplainQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetSchema(ctx, req.(*GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetQueryStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueryStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetQueryStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetQueryStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetQueryStats(ctx, req.(*GetQueryStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CancelQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CancelQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_CancelQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CancelQuery(ctx, req.(*CancelQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryService_ServiceDesc is the grpc.ServiceDesc for QueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "truenow.query.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteQuery",
			Handler:    _QueryService_ExecuteQuery_Handler,
		},
		{
			MethodName: "ExplainQuery",
			Handler:    _QueryService_ExplainQuery_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _QueryService_GetSchema_Handler,
		},
		{
			MethodName: "GetQueryStats",
			Handler:    _QueryService_GetQueryStats_Handler,
		},
		{
			MethodName: "CancelQuery",
			Handler:    _QueryService_CancelQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamQuery",
			Handler:       _QueryService_StreamQuery_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "query.proto",
}
