// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: control_plane.proto

package controlplane

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ControlPlaneService_CreateSchema_FullMethodName           = "/truenow.controlplane.ControlPlaneService/CreateSchema"
	ControlPlaneService_GetSchema_FullMethodName              = "/truenow.controlplane.ControlPlaneService/GetSchema"
	ControlPlaneService_UpdateSchema_FullMethodName           = "/truenow.controlplane.ControlPlaneService/UpdateSchema"
	ControlPlaneService_ListSchemas_FullMethodName            = "/truenow.controlplane.ControlPlaneService/ListSchemas"
	ControlPlaneService_GetCurrentEpoch_FullMethodName        = "/truenow.controlplane.ControlPlaneService/GetCurrentEpoch"
	ControlPlaneService_ProposeEpochTransition_FullMethodName = "/truenow.controlplane.ControlPlaneService/ProposeEpochTransition"
	ControlPlaneService_CommitEpoch_FullMethodName            = "/truenow.controlplane.ControlPlaneService/CommitEpoch"
	ControlPlaneService_RegisterService_FullMethodName        = "/truenow.controlplane.ControlPlaneService/RegisterService"
	ControlPlaneService_UnregisterService_FullMethodName      = "/truenow.controlplane.ControlPlaneService/UnregisterService"
	ControlPlaneService_ListServices_FullMethodName           = "/truenow.controlplane.ControlPlaneService/ListServices"
	ControlPlaneService_GetServiceEndpoints_FullMethodName    = "/truenow.controlplane.ControlPlaneService/GetServiceEndpoints"
	ControlPlaneService_GetConfig_FullMethodName              = "/truenow.controlplane.ControlPlaneService/GetConfig"
	ControlPlaneService_UpdateConfig_FullMethodName           = "/truenow.controlplane.ControlPlaneService/UpdateConfig"
	ControlPlaneService_GetAuditLog_FullMethodName            = "/truenow.controlplane.ControlPlaneService/GetAuditLog"
	ControlPlaneService_RecordAuditEvent_FullMethodName       = "/truenow.controlplane.ControlPlaneService/RecordAuditEvent"
)

// ControlPlaneServiceClient is the client API for ControlPlaneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ControlPlaneService manages metadata, schemas, epochs, and service discovery
type ControlPlaneServiceClient interface {
	// Schema management
	CreateSchema(ctx context.Context, in *CreateSchemaRequest, opts ...grpc.CallOption) (*CreateSchemaResponse, error)
	GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error)
	UpdateSchema(ctx context.Context, in *UpdateSchemaRequest, opts ...grpc.CallOption) (*UpdateSchemaResponse, error)
	ListSchemas(ctx context.Context, in *ListSchemasRequest, opts ...grpc.CallOption) (*ListSchemasResponse, error)
	// Epoch management for atomic configuration changes
	GetCurrentEpoch(ctx context.Context, in *GetCurrentEpochRequest, opts ...grpc.CallOption) (*GetCurrentEpochResponse, error)
	ProposeEpochTransition(ctx context.Context, in *ProposeEpochTransitionRequest, opts ...grpc.CallOption) (*ProposeEpochTransitionResponse, error)
	CommitEpoch(ctx context.Context, in *CommitEpochRequest, opts ...grpc.CallOption) (*CommitEpochResponse, error)
	// Service discovery and registration
	RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error)
	UnregisterService(ctx context.Context, in *UnregisterServiceRequest, opts ...grpc.CallOption) (*UnregisterServiceResponse, error)
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	GetServiceEndpoints(ctx context.Context, in *GetServiceEndpointsRequest, opts ...grpc.CallOption) (*GetServiceEndpointsResponse, error)
	// Configuration management
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error)
	// Audit and compliance
	GetAuditLog(ctx context.Context, in *GetAuditLogRequest, opts ...grpc.CallOption) (*GetAuditLogResponse, error)
	RecordAuditEvent(ctx context.Context, in *RecordAuditEventRequest, opts ...grpc.CallOption) (*RecordAuditEventResponse, error)
}

type controlPlaneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControlPlaneServiceClient(cc grpc.ClientConnInterface) ControlPlaneServiceClient {
	return &controlPlaneServiceClient{cc}
}

func (c *controlPlaneServiceClient) CreateSchema(ctx context.Context, in *CreateSchemaRequest, opts ...grpc.CallOption) (*CreateSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSchemaResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_CreateSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSchemaResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_GetSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) UpdateSchema(ctx context.Context, in *UpdateSchemaRequest, opts ...grpc.CallOption) (*UpdateSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSchemaResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_UpdateSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) ListSchemas(ctx context.Context, in *ListSchemasRequest, opts ...grpc.CallOption) (*ListSchemasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSchemasResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_ListSchemas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) GetCurrentEpoch(ctx context.Context, in *GetCurrentEpochRequest, opts ...grpc.CallOption) (*GetCurrentEpochResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentEpochResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_GetCurrentEpoch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) ProposeEpochTransition(ctx context.Context, in *ProposeEpochTransitionRequest, opts ...grpc.CallOption) (*ProposeEpochTransitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProposeEpochTransitionResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_ProposeEpochTransition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) CommitEpoch(ctx context.Context, in *CommitEpochRequest, opts ...grpc.CallOption) (*CommitEpochResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitEpochResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_CommitEpoch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterServiceResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_RegisterService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) UnregisterService(ctx context.Context, in *UnregisterServiceRequest, opts ...grpc.CallOption) (*UnregisterServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterServiceResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_UnregisterService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_ListServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) GetServiceEndpoints(ctx context.Context, in *GetServiceEndpointsRequest, opts ...grpc.CallOption) (*GetServiceEndpointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceEndpointsResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_GetServiceEndpoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConfigResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_UpdateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) GetAuditLog(ctx context.Context, in *GetAuditLogRequest, opts ...grpc.CallOption) (*GetAuditLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuditLogResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_GetAuditLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) RecordAuditEvent(ctx context.Context, in *RecordAuditEventRequest, opts ...grpc.CallOption) (*RecordAuditEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordAuditEventResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_RecordAuditEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlPlaneServiceServer is the server API for ControlPlaneService service.
// All implementations must embed UnimplementedControlPlaneServiceServer
// for forward compatibility.
//
// ControlPlaneService manages metadata, schemas, epochs, and service discovery
type ControlPlaneServiceServer interface {
	// Schema management
	CreateSchema(context.Context, *CreateSchemaRequest) (*CreateSchemaResponse, error)
	GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error)
	UpdateSchema(context.Context, *UpdateSchemaRequest) (*UpdateSchemaResponse, error)
	ListSchemas(context.Context, *ListSchemasRequest) (*ListSchemasResponse, error)
	// Epoch management for atomic configuration changes
	GetCurrentEpoch(context.Context, *GetCurrentEpochRequest) (*GetCurrentEpochResponse, error)
	ProposeEpochTransition(context.Context, *ProposeEpochTransitionRequest) (*ProposeEpochTransitionResponse, error)
	CommitEpoch(context.Context, *CommitEpochRequest) (*CommitEpochResponse, error)
	// Service discovery and registration
	RegisterService(context.Context, *RegisterServiceRequest) (*RegisterServiceResponse, error)
	UnregisterService(context.Context, *UnregisterServiceRequest) (*UnregisterServiceResponse, error)
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	GetServiceEndpoints(context.Context, *GetServiceEndpointsRequest) (*GetServiceEndpointsResponse, error)
	// Configuration management
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error)
	// Audit and compliance
	GetAuditLog(context.Context, *GetAuditLogRequest) (*GetAuditLogResponse, error)
	RecordAuditEvent(context.Context, *RecordAuditEventRequest) (*RecordAuditEventResponse, error)
	mustEmbedUnimplementedControlPlaneServiceServer()
}

// UnimplementedControlPlaneServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedControlPlaneServiceServer struct{}

func (UnimplementedControlPlaneServiceServer) CreateSchema(context.Context, *CreateSchemaRequest) (*CreateSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchema not implemented")
}
func (UnimplementedControlPlaneServiceServer) GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (UnimplementedControlPlaneServiceServer) UpdateSchema(context.Context, *UpdateSchemaRequest) (*UpdateSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchema not implemented")
}
func (UnimplementedControlPlaneServiceServer) ListSchemas(context.Context, *ListSchemasRequest) (*ListSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSchemas not implemented")
}
func (UnimplementedControlPlaneServiceServer) GetCurrentEpoch(context.Context, *GetCurrentEpochRequest) (*GetCurrentEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentEpoch not implemented")
}
func (UnimplementedControlPlaneServiceServer) ProposeEpochTransition(context.Context, *ProposeEpochTransitionRequest) (*ProposeEpochTransitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeEpochTransition not implemented")
}
func (UnimplementedControlPlaneServiceServer) CommitEpoch(context.Context, *CommitEpochRequest) (*CommitEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitEpoch not implemented")
}
func (UnimplementedControlPlaneServiceServer) RegisterService(context.Context, *RegisterServiceRequest) (*RegisterServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (UnimplementedControlPlaneServiceServer) UnregisterService(context.Context, *UnregisterServiceRequest) (*UnregisterServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterService not implemented")
}
func (UnimplementedControlPlaneServiceServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedControlPlaneServiceServer) GetServiceEndpoints(context.Context, *GetServiceEndpointsRequest) (*GetServiceEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceEndpoints not implemented")
}
func (UnimplementedControlPlaneServiceServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedControlPlaneServiceServer) UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedControlPlaneServiceServer) GetAuditLog(context.Context, *GetAuditLogRequest) (*GetAuditLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLog not implemented")
}
func (UnimplementedControlPlaneServiceServer) RecordAuditEvent(context.Context, *RecordAuditEventRequest) (*RecordAuditEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordAuditEvent not implemented")
}
func (UnimplementedControlPlaneServiceServer) mustEmbedUnimplementedControlPlaneServiceServer() {}
func (UnimplementedControlPlaneServiceServer) testEmbeddedByValue()                             {}

// UnsafeControlPlaneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlPlaneServiceServer will
// result in compilation errors.
type UnsafeControlPlaneServiceServer interface {
	mustEmbedUnimplementedControlPlaneServiceServer()
}

func RegisterControlPlaneServiceServer(s grpc.ServiceRegistrar, srv ControlPlaneServiceServer) {
	// If the following call pancis, it indicates UnimplementedControlPlaneServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ControlPlaneService_ServiceDesc, srv)
}

func _ControlPlaneService_CreateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).CreateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_CreateSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).CreateSchema(ctx, req.(*CreateSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_GetSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).GetSchema(ctx, req.(*GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_UpdateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).UpdateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_UpdateSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).UpdateSchema(ctx, req.(*UpdateSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_ListSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).ListSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_ListSchemas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).ListSchemas(ctx, req.(*ListSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_GetCurrentEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).GetCurrentEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_GetCurrentEpoch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).GetCurrentEpoch(ctx, req.(*GetCurrentEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_ProposeEpochTransition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeEpochTransitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).ProposeEpochTransition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_ProposeEpochTransition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).ProposeEpochTransition(ctx, req.(*ProposeEpochTransitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_CommitEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).CommitEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_CommitEpoch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).CommitEpoch(ctx, req.(*CommitEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_RegisterService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).RegisterService(ctx, req.(*RegisterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_UnregisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).UnregisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_UnregisterService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).UnregisterService(ctx, req.(*UnregisterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_GetServiceEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).GetServiceEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_GetServiceEndpoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).GetServiceEndpoints(ctx, req.(*GetServiceEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_UpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_GetAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuditLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).GetAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_GetAuditLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).GetAuditLog(ctx, req.(*GetAuditLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_RecordAuditEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordAuditEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).RecordAuditEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_RecordAuditEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).RecordAuditEvent(ctx, req.(*RecordAuditEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControlPlaneService_ServiceDesc is the grpc.ServiceDesc for ControlPlaneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlPlaneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "truenow.controlplane.ControlPlaneService",
	HandlerType: (*ControlPlaneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSchema",
			Handler:    _ControlPlaneService_CreateSchema_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _ControlPlaneService_GetSchema_Handler,
		},
		{
			MethodName: "UpdateSchema",
			Handler:    _ControlPlaneService_UpdateSchema_Handler,
		},
		{
			MethodName: "ListSchemas",
			Handler:    _ControlPlaneService_ListSchemas_Handler,
		},
		{
			MethodName: "GetCurrentEpoch",
			Handler:    _ControlPlaneService_GetCurrentEpoch_Handler,
		},
		{
			MethodName: "ProposeEpochTransition",
			Handler:    _ControlPlaneService_ProposeEpochTransition_Handler,
		},
		{
			MethodName: "CommitEpoch",
			Handler:    _ControlPlaneService_CommitEpoch_Handler,
		},
		{
			MethodName: "RegisterService",
			Handler:    _ControlPlaneService_RegisterService_Handler,
		},
		{
			MethodName: "UnregisterService",
			Handler:    _ControlPlaneService_UnregisterService_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _ControlPlaneService_ListServices_Handler,
		},
		{
			MethodName: "GetServiceEndpoints",
			Handler:    _ControlPlaneService_GetServiceEndpoints_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ControlPlaneService_GetConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _ControlPlaneService_UpdateConfig_Handler,
		},
		{
			MethodName: "GetAuditLog",
			Handler:    _ControlPlaneService_GetAuditLog_Handler,
		},
		{
			MethodName: "RecordAuditEvent",
			Handler:    _ControlPlaneService_RecordAuditEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control_plane.proto",
}
