// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: gateway.proto

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GatewayService_IngestEvent_FullMethodName        = "/truenow.gateway.GatewayService/IngestEvent"
	GatewayService_BatchIngestEvents_FullMethodName  = "/truenow.gateway.GatewayService/BatchIngestEvents"
	GatewayService_StreamIngestEvents_FullMethodName = "/truenow.gateway.GatewayService/StreamIngestEvents"
	GatewayService_GetIngestionStats_FullMethodName  = "/truenow.gateway.GatewayService/GetIngestionStats"
	GatewayService_HealthCheck_FullMethodName        = "/truenow.gateway.GatewayService/HealthCheck"
	GatewayService_GetRateLimitStatus_FullMethodName = "/truenow.gateway.GatewayService/GetRateLimitStatus"
)

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GatewayService handles high-throughput event ingestion at 1B QPS scale
type GatewayServiceClient interface {
	// Ingest a single event
	IngestEvent(ctx context.Context, in *IngestEventRequest, opts ...grpc.CallOption) (*IngestEventResponse, error)
	// Batch ingest for efficiency at scale
	BatchIngestEvents(ctx context.Context, in *BatchIngestEventsRequest, opts ...grpc.CallOption) (*BatchIngestEventsResponse, error)
	// Stream events for continuous ingestion
	StreamIngestEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[IngestEventRequest, IngestEventResponse], error)
	// Get ingestion statistics
	GetIngestionStats(ctx context.Context, in *GetIngestionStatsRequest, opts ...grpc.CallOption) (*IngestionStatsResponse, error)
	// Check service health
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Get rate limit status for a client
	GetRateLimitStatus(ctx context.Context, in *GetRateLimitStatusRequest, opts ...grpc.CallOption) (*RateLimitStatusResponse, error)
}

type gatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayServiceClient(cc grpc.ClientConnInterface) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) IngestEvent(ctx context.Context, in *IngestEventRequest, opts ...grpc.CallOption) (*IngestEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestEventResponse)
	err := c.cc.Invoke(ctx, GatewayService_IngestEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) BatchIngestEvents(ctx context.Context, in *BatchIngestEventsRequest, opts ...grpc.CallOption) (*BatchIngestEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchIngestEventsResponse)
	err := c.cc.Invoke(ctx, GatewayService_BatchIngestEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) StreamIngestEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[IngestEventRequest, IngestEventResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GatewayService_ServiceDesc.Streams[0], GatewayService_StreamIngestEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[IngestEventRequest, IngestEventResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GatewayService_StreamIngestEventsClient = grpc.BidiStreamingClient[IngestEventRequest, IngestEventResponse]

func (c *gatewayServiceClient) GetIngestionStats(ctx context.Context, in *GetIngestionStatsRequest, opts ...grpc.CallOption) (*IngestionStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestionStatsResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetIngestionStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, GatewayService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetRateLimitStatus(ctx context.Context, in *GetRateLimitStatusRequest, opts ...grpc.CallOption) (*RateLimitStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RateLimitStatusResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetRateLimitStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServiceServer is the server API for GatewayService service.
// All implementations must embed UnimplementedGatewayServiceServer
// for forward compatibility.
//
// GatewayService handles high-throughput event ingestion at 1B QPS scale
type GatewayServiceServer interface {
	// Ingest a single event
	IngestEvent(context.Context, *IngestEventRequest) (*IngestEventResponse, error)
	// Batch ingest for efficiency at scale
	BatchIngestEvents(context.Context, *BatchIngestEventsRequest) (*BatchIngestEventsResponse, error)
	// Stream events for continuous ingestion
	StreamIngestEvents(grpc.BidiStreamingServer[IngestEventRequest, IngestEventResponse]) error
	// Get ingestion statistics
	GetIngestionStats(context.Context, *GetIngestionStatsRequest) (*IngestionStatsResponse, error)
	// Check service health
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Get rate limit status for a client
	GetRateLimitStatus(context.Context, *GetRateLimitStatusRequest) (*RateLimitStatusResponse, error)
	mustEmbedUnimplementedGatewayServiceServer()
}

// UnimplementedGatewayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayServiceServer struct{}

func (UnimplementedGatewayServiceServer) IngestEvent(context.Context, *IngestEventRequest) (*IngestEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestEvent not implemented")
}
func (UnimplementedGatewayServiceServer) BatchIngestEvents(context.Context, *BatchIngestEventsRequest) (*BatchIngestEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchIngestEvents not implemented")
}
func (UnimplementedGatewayServiceServer) StreamIngestEvents(grpc.BidiStreamingServer[IngestEventRequest, IngestEventResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamIngestEvents not implemented")
}
func (UnimplementedGatewayServiceServer) GetIngestionStats(context.Context, *GetIngestionStatsRequest) (*IngestionStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIngestionStats not implemented")
}
func (UnimplementedGatewayServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedGatewayServiceServer) GetRateLimitStatus(context.Context, *GetRateLimitStatusRequest) (*RateLimitStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRateLimitStatus not implemented")
}
func (UnimplementedGatewayServiceServer) mustEmbedUnimplementedGatewayServiceServer() {}
func (UnimplementedGatewayServiceServer) testEmbeddedByValue()                        {}

// UnsafeGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServiceServer will
// result in compilation errors.
type UnsafeGatewayServiceServer interface {
	mustEmbedUnimplementedGatewayServiceServer()
}

func RegisterGatewayServiceServer(s grpc.ServiceRegistrar, srv GatewayServiceServer) {
	// If the following call pancis, it indicates UnimplementedGatewayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GatewayService_ServiceDesc, srv)
}

func _GatewayService_IngestEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).IngestEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_IngestEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).IngestEvent(ctx, req.(*IngestEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_BatchIngestEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchIngestEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).BatchIngestEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_BatchIngestEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).BatchIngestEvents(ctx, req.(*BatchIngestEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_StreamIngestEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GatewayServiceServer).StreamIngestEvents(&grpc.GenericServerStream[IngestEventRequest, IngestEventResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GatewayService_StreamIngestEventsServer = grpc.BidiStreamingServer[IngestEventRequest, IngestEventResponse]

func _GatewayService_GetIngestionStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIngestionStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetIngestionStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetIngestionStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetIngestionStats(ctx, req.(*GetIngestionStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetRateLimitStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRateLimitStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetRateLimitStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetRateLimitStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetRateLimitStatus(ctx, req.(*GetRateLimitStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayService_ServiceDesc is the grpc.ServiceDesc for GatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "truenow.gateway.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestEvent",
			Handler:    _GatewayService_IngestEvent_Handler,
		},
		{
			MethodName: "BatchIngestEvents",
			Handler:    _GatewayService_BatchIngestEvents_Handler,
		},
		{
			MethodName: "GetIngestionStats",
			Handler:    _GatewayService_GetIngestionStats_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _GatewayService_HealthCheck_Handler,
		},
		{
			MethodName: "GetRateLimitStatus",
			Handler:    _GatewayService_GetRateLimitStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamIngestEvents",
			Handler:       _GatewayService_StreamIngestEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gateway.proto",
}
