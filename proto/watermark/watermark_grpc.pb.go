// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: watermark.proto

package watermark

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WatermarkService_ReportWatermark_FullMethodName       = "/truenow.watermark.WatermarkService/ReportWatermark"
	WatermarkService_StreamWatermarks_FullMethodName      = "/truenow.watermark.WatermarkService/StreamWatermarks"
	WatermarkService_GetGlobalFreshness_FullMethodName    = "/truenow.watermark.WatermarkService/GetGlobalFreshness"
	WatermarkService_GetTableFreshness_FullMethodName     = "/truenow.watermark.WatermarkService/GetTableFreshness"
	WatermarkService_GetSLOViolations_FullMethodName      = "/truenow.watermark.WatermarkService/GetSLOViolations"
	WatermarkService_BatchReportWatermarks_FullMethodName = "/truenow.watermark.WatermarkService/BatchReportWatermarks"
)

// WatermarkServiceClient is the client API for WatermarkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WatermarkService tracks data freshness across the platform
type WatermarkServiceClient interface {
	// Report a watermark from a service
	ReportWatermark(ctx context.Context, in *ReportWatermarkRequest, opts ...grpc.CallOption) (*ReportWatermarkResponse, error)
	// Stream watermarks for real-time monitoring
	StreamWatermarks(ctx context.Context, in *StreamWatermarksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatermarkUpdate], error)
	// Get global freshness metrics
	GetGlobalFreshness(ctx context.Context, in *GetGlobalFreshnessRequest, opts ...grpc.CallOption) (*GlobalFreshnessResponse, error)
	// Get freshness for a specific namespace/table
	GetTableFreshness(ctx context.Context, in *GetTableFreshnessRequest, opts ...grpc.CallOption) (*TableFreshnessResponse, error)
	// Get SLO violations
	GetSLOViolations(ctx context.Context, in *GetSLOViolationsRequest, opts ...grpc.CallOption) (*SLOViolationsResponse, error)
	// Batch report multiple watermarks (for efficiency at scale)
	BatchReportWatermarks(ctx context.Context, in *BatchReportWatermarksRequest, opts ...grpc.CallOption) (*BatchReportWatermarksResponse, error)
}

type watermarkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWatermarkServiceClient(cc grpc.ClientConnInterface) WatermarkServiceClient {
	return &watermarkServiceClient{cc}
}

func (c *watermarkServiceClient) ReportWatermark(ctx context.Context, in *ReportWatermarkRequest, opts ...grpc.CallOption) (*ReportWatermarkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportWatermarkResponse)
	err := c.cc.Invoke(ctx, WatermarkService_ReportWatermark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watermarkServiceClient) StreamWatermarks(ctx context.Context, in *StreamWatermarksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatermarkUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WatermarkService_ServiceDesc.Streams[0], WatermarkService_StreamWatermarks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamWatermarksRequest, WatermarkUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WatermarkService_StreamWatermarksClient = grpc.ServerStreamingClient[WatermarkUpdate]

func (c *watermarkServiceClient) GetGlobalFreshness(ctx context.Context, in *GetGlobalFreshnessRequest, opts ...grpc.CallOption) (*GlobalFreshnessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GlobalFreshnessResponse)
	err := c.cc.Invoke(ctx, WatermarkService_GetGlobalFreshness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watermarkServiceClient) GetTableFreshness(ctx context.Context, in *GetTableFreshnessRequest, opts ...grpc.CallOption) (*TableFreshnessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TableFreshnessResponse)
	err := c.cc.Invoke(ctx, WatermarkService_GetTableFreshness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watermarkServiceClient) GetSLOViolations(ctx context.Context, in *GetSLOViolationsRequest, opts ...grpc.CallOption) (*SLOViolationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SLOViolationsResponse)
	err := c.cc.Invoke(ctx, WatermarkService_GetSLOViolations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watermarkServiceClient) BatchReportWatermarks(ctx context.Context, in *BatchReportWatermarksRequest, opts ...grpc.CallOption) (*BatchReportWatermarksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchReportWatermarksResponse)
	err := c.cc.Invoke(ctx, WatermarkService_BatchReportWatermarks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatermarkServiceServer is the server API for WatermarkService service.
// All implementations must embed UnimplementedWatermarkServiceServer
// for forward compatibility.
//
// WatermarkService tracks data freshness across the platform
type WatermarkServiceServer interface {
	// Report a watermark from a service
	ReportWatermark(context.Context, *ReportWatermarkRequest) (*ReportWatermarkResponse, error)
	// Stream watermarks for real-time monitoring
	StreamWatermarks(*StreamWatermarksRequest, grpc.ServerStreamingServer[WatermarkUpdate]) error
	// Get global freshness metrics
	GetGlobalFreshness(context.Context, *GetGlobalFreshnessRequest) (*GlobalFreshnessResponse, error)
	// Get freshness for a specific namespace/table
	GetTableFreshness(context.Context, *GetTableFreshnessRequest) (*TableFreshnessResponse, error)
	// Get SLO violations
	GetSLOViolations(context.Context, *GetSLOViolationsRequest) (*SLOViolationsResponse, error)
	// Batch report multiple watermarks (for efficiency at scale)
	BatchReportWatermarks(context.Context, *BatchReportWatermarksRequest) (*BatchReportWatermarksResponse, error)
	mustEmbedUnimplementedWatermarkServiceServer()
}

// UnimplementedWatermarkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWatermarkServiceServer struct{}

func (UnimplementedWatermarkServiceServer) ReportWatermark(context.Context, *ReportWatermarkRequest) (*ReportWatermarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportWatermark not implemented")
}
func (UnimplementedWatermarkServiceServer) StreamWatermarks(*StreamWatermarksRequest, grpc.ServerStreamingServer[WatermarkUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StreamWatermarks not implemented")
}
func (UnimplementedWatermarkServiceServer) GetGlobalFreshness(context.Context, *GetGlobalFreshnessRequest) (*GlobalFreshnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalFreshness not implemented")
}
func (UnimplementedWatermarkServiceServer) GetTableFreshness(context.Context, *GetTableFreshnessRequest) (*TableFreshnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableFreshness not implemented")
}
func (UnimplementedWatermarkServiceServer) GetSLOViolations(context.Context, *GetSLOViolationsRequest) (*SLOViolationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSLOViolations not implemented")
}
func (UnimplementedWatermarkServiceServer) BatchReportWatermarks(context.Context, *BatchReportWatermarksRequest) (*BatchReportWatermarksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchReportWatermarks not implemented")
}
func (UnimplementedWatermarkServiceServer) mustEmbedUnimplementedWatermarkServiceServer() {}
func (UnimplementedWatermarkServiceServer) testEmbeddedByValue()                          {}

// UnsafeWatermarkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatermarkServiceServer will
// result in compilation errors.
type UnsafeWatermarkServiceServer interface {
	mustEmbedUnimplementedWatermarkServiceServer()
}

func RegisterWatermarkServiceServer(s grpc.ServiceRegistrar, srv WatermarkServiceServer) {
	// If the following call pancis, it indicates UnimplementedWatermarkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WatermarkService_ServiceDesc, srv)
}

func _WatermarkService_ReportWatermark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportWatermarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatermarkServiceServer).ReportWatermark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatermarkService_ReportWatermark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatermarkServiceServer).ReportWatermark(ctx, req.(*ReportWatermarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatermarkService_StreamWatermarks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamWatermarksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WatermarkServiceServer).StreamWatermarks(m, &grpc.GenericServerStream[StreamWatermarksRequest, WatermarkUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WatermarkService_StreamWatermarksServer = grpc.ServerStreamingServer[WatermarkUpdate]

func _WatermarkService_GetGlobalFreshness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGlobalFreshnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatermarkServiceServer).GetGlobalFreshness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatermarkService_GetGlobalFreshness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatermarkServiceServer).GetGlobalFreshness(ctx, req.(*GetGlobalFreshnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatermarkService_GetTableFreshness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableFreshnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatermarkServiceServer).GetTableFreshness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatermarkService_GetTableFreshness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatermarkServiceServer).GetTableFreshness(ctx, req.(*GetTableFreshnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatermarkService_GetSLOViolations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSLOViolationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatermarkServiceServer).GetSLOViolations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatermarkService_GetSLOViolations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatermarkServiceServer).GetSLOViolations(ctx, req.(*GetSLOViolationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatermarkService_BatchReportWatermarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchReportWatermarksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatermarkServiceServer).BatchReportWatermarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatermarkService_BatchReportWatermarks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatermarkServiceServer).BatchReportWatermarks(ctx, req.(*BatchReportWatermarksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WatermarkService_ServiceDesc is the grpc.ServiceDesc for WatermarkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WatermarkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "truenow.watermark.WatermarkService",
	HandlerType: (*WatermarkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportWatermark",
			Handler:    _WatermarkService_ReportWatermark_Handler,
		},
		{
			MethodName: "GetGlobalFreshness",
			Handler:    _WatermarkService_GetGlobalFreshness_Handler,
		},
		{
			MethodName: "GetTableFreshness",
			Handler:    _WatermarkService_GetTableFreshness_Handler,
		},
		{
			MethodName: "GetSLOViolations",
			Handler:    _WatermarkService_GetSLOViolations_Handler,
		},
		{
			MethodName: "BatchReportWatermarks",
			Handler:    _WatermarkService_BatchReportWatermarks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamWatermarks",
			Handler:       _WatermarkService_StreamWatermarks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "watermark.proto",
}
