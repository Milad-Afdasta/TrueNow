// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v5.29.3
// source: watermark.proto

package watermark

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReportWatermarkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Service       string                 `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Table         string                 `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	WatermarkMs   int64                  `protobuf:"varint,4,opt,name=watermark_ms,json=watermarkMs,proto3" json:"watermark_ms,omitempty"` // Unix timestamp in milliseconds
	EventTime     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	Labels        map[string]string      `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportWatermarkRequest) Reset() {
	*x = ReportWatermarkRequest{}
	mi := &file_watermark_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportWatermarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportWatermarkRequest) ProtoMessage() {}

func (x *ReportWatermarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_watermark_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportWatermarkRequest.ProtoReflect.Descriptor instead.
func (*ReportWatermarkRequest) Descriptor() ([]byte, []int) {
	return file_watermark_proto_rawDescGZIP(), []int{0}
}

func (x *ReportWatermarkRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ReportWatermarkRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ReportWatermarkRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ReportWatermarkRequest) GetWatermarkMs() int64 {
	if x != nil {
		return x.WatermarkMs
	}
	return 0
}

func (x *ReportWatermarkRequest) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *ReportWatermarkRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ReportWatermarkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportWatermarkResponse) Reset() {
	*x = ReportWatermarkResponse{}
	mi := &file_watermark_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportWatermarkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportWatermarkResponse) ProtoMessage() {}

func (x *ReportWatermarkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_watermark_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportWatermarkResponse.ProtoReflect.Descriptor instead.
func (*ReportWatermarkResponse) Descriptor() ([]byte, []int) {
	return file_watermark_proto_rawDescGZIP(), []int{1}
}

func (x *ReportWatermarkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReportWatermarkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BatchReportWatermarksRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Watermarks    []*ReportWatermarkRequest `protobuf:"bytes,1,rep,name=watermarks,proto3" json:"watermarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchReportWatermarksRequest) Reset() {
	*x = BatchReportWatermarksRequest{}
	mi := &file_watermark_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchReportWatermarksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchReportWatermarksRequest) ProtoMessage() {}

func (x *BatchReportWatermarksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_watermark_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchReportWatermarksRequest.ProtoReflect.Descriptor instead.
func (*BatchReportWatermarksRequest) Descriptor() ([]byte, []int) {
	return file_watermark_proto_rawDescGZIP(), []int{2}
}

func (x *BatchReportWatermarksRequest) GetWatermarks() []*ReportWatermarkRequest {
	if x != nil {
		return x.Watermarks
	}
	return nil
}

type BatchReportWatermarksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Succeeded     int32                  `protobuf:"varint,1,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Failed        int32                  `protobuf:"varint,2,opt,name=failed,proto3" json:"failed,omitempty"`
	Errors        []string               `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchReportWatermarksResponse) Reset() {
	*x = BatchReportWatermarksResponse{}
	mi := &file_watermark_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchReportWatermarksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchReportWatermarksResponse) ProtoMessage() {}

func (x *BatchReportWatermarksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_watermark_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchReportWatermarksResponse.ProtoReflect.Descriptor instead.
func (*BatchReportWatermarksResponse) Descriptor() ([]byte, []int) {
	return file_watermark_proto_rawDescGZIP(), []int{3}
}

func (x *BatchReportWatermarksResponse) GetSucceeded() int32 {
	if x != nil {
		return x.Succeeded
	}
	return 0
}

func (x *BatchReportWatermarksResponse) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *BatchReportWatermarksResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type StreamWatermarksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespaces    []string               `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`                    // Empty means all
	Tables        []string               `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`                            // Empty means all
	IntervalMs    int32                  `protobuf:"varint,3,opt,name=interval_ms,json=intervalMs,proto3" json:"interval_ms,omitempty"` // Min 100ms
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamWatermarksRequest) Reset() {
	*x = StreamWatermarksRequest{}
	mi := &file_watermark_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamWatermarksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWatermarksRequest) ProtoMessage() {}

func (x *StreamWatermarksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_watermark_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWatermarksRequest.ProtoReflect.Descriptor instead.
func (*StreamWatermarksRequest) Descriptor() ([]byte, []int) {
	return file_watermark_proto_rawDescGZIP(), []int{4}
}

func (x *StreamWatermarksRequest) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *StreamWatermarksRequest) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *StreamWatermarksRequest) GetIntervalMs() int32 {
	if x != nil {
		return x.IntervalMs
	}
	return 0
}

type WatermarkUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Service       string                 `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Table         string                 `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	WatermarkMs   int64                  `protobuf:"varint,4,opt,name=watermark_ms,json=watermarkMs,proto3" json:"watermark_ms,omitempty"`
	FreshnessMs   int64                  `protobuf:"varint,5,opt,name=freshness_ms,json=freshnessMs,proto3" json:"freshness_ms,omitempty"` // Current time - watermark
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatermarkUpdate) Reset() {
	*x = WatermarkUpdate{}
	mi := &file_watermark_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatermarkUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatermarkUpdate) ProtoMessage() {}

func (x *WatermarkUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_watermark_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatermarkUpdate.ProtoReflect.Descriptor instead.
func (*WatermarkUpdate) Descriptor() ([]byte, []int) {
	return file_watermark_proto_rawDescGZIP(), []int{5}
}

func (x *WatermarkUpdate) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *WatermarkUpdate) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WatermarkUpdate) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *WatermarkUpdate) GetWatermarkMs() int64 {
	if x != nil {
		return x.WatermarkMs
	}
	return 0
}

func (x *WatermarkUpdate) GetFreshnessMs() int64 {
	if x != nil {
		return x.FreshnessMs
	}
	return 0
}

func (x *WatermarkUpdate) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type GetGlobalFreshnessRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGlobalFreshnessRequest) Reset() {
	*x = GetGlobalFreshnessRequest{}
	mi := &file_watermark_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGlobalFreshnessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalFreshnessRequest) ProtoMessage() {}

func (x *GetGlobalFreshnessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_watermark_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalFreshnessRequest.ProtoReflect.Descriptor instead.
func (*GetGlobalFreshnessRequest) Descriptor() ([]byte, []int) {
	return file_watermark_proto_rawDescGZIP(), []int{6}
}

type GlobalFreshnessResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	GlobalFreshnessP50 int64                  `protobuf:"varint,1,opt,name=global_freshness_p50,json=globalFreshnessP50,proto3" json:"global_freshness_p50,omitempty"`
	GlobalFreshnessP95 int64                  `protobuf:"varint,2,opt,name=global_freshness_p95,json=globalFreshnessP95,proto3" json:"global_freshness_p95,omitempty"`
	GlobalFreshnessP99 int64                  `protobuf:"varint,3,opt,name=global_freshness_p99,json=globalFreshnessP99,proto3" json:"global_freshness_p99,omitempty"`
	TotalTables        int32                  `protobuf:"varint,4,opt,name=total_tables,json=totalTables,proto3" json:"total_tables,omitempty"`
	StaleTables        int32                  `protobuf:"varint,5,opt,name=stale_tables,json=staleTables,proto3" json:"stale_tables,omitempty"` // Tables exceeding SLO
	LastUpdate         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GlobalFreshnessResponse) Reset() {
	*x = GlobalFreshnessResponse{}
	mi := &file_watermark_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalFreshnessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalFreshnessResponse) ProtoMessage() {}

func (x *GlobalFreshnessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_watermark_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalFreshnessResponse.ProtoReflect.Descriptor instead.
func (*GlobalFreshnessResponse) Descriptor() ([]byte, []int) {
	return file_watermark_proto_rawDescGZIP(), []int{7}
}

func (x *GlobalFreshnessResponse) GetGlobalFreshnessP50() int64 {
	if x != nil {
		return x.GlobalFreshnessP50
	}
	return 0
}

func (x *GlobalFreshnessResponse) GetGlobalFreshnessP95() int64 {
	if x != nil {
		return x.GlobalFreshnessP95
	}
	return 0
}

func (x *GlobalFreshnessResponse) GetGlobalFreshnessP99() int64 {
	if x != nil {
		return x.GlobalFreshnessP99
	}
	return 0
}

func (x *GlobalFreshnessResponse) GetTotalTables() int32 {
	if x != nil {
		return x.TotalTables
	}
	return 0
}

func (x *GlobalFreshnessResponse) GetStaleTables() int32 {
	if x != nil {
		return x.StaleTables
	}
	return 0
}

func (x *GlobalFreshnessResponse) GetLastUpdate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

type GetTableFreshnessRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Table         string                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTableFreshnessRequest) Reset() {
	*x = GetTableFreshnessRequest{}
	mi := &file_watermark_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTableFreshnessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableFreshnessRequest) ProtoMessage() {}

func (x *GetTableFreshnessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_watermark_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableFreshnessRequest.ProtoReflect.Descriptor instead.
func (*GetTableFreshnessRequest) Descriptor() ([]byte, []int) {
	return file_watermark_proto_rawDescGZIP(), []int{8}
}

func (x *GetTableFreshnessRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetTableFreshnessRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type TableFreshnessResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Namespace         string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Table             string                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	FreshnessP50      int64                  `protobuf:"varint,3,opt,name=freshness_p50,json=freshnessP50,proto3" json:"freshness_p50,omitempty"`
	FreshnessP95      int64                  `protobuf:"varint,4,opt,name=freshness_p95,json=freshnessP95,proto3" json:"freshness_p95,omitempty"`
	FreshnessP99      int64                  `protobuf:"varint,5,opt,name=freshness_p99,json=freshnessP99,proto3" json:"freshness_p99,omitempty"`
	ServiceWatermarks []*ServiceWatermark    `protobuf:"bytes,6,rep,name=service_watermarks,json=serviceWatermarks,proto3" json:"service_watermarks,omitempty"`
	LastUpdate        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TableFreshnessResponse) Reset() {
	*x = TableFreshnessResponse{}
	mi := &file_watermark_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableFreshnessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableFreshnessResponse) ProtoMessage() {}

func (x *TableFreshnessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_watermark_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableFreshnessResponse.ProtoReflect.Descriptor instead.
func (*TableFreshnessResponse) Descriptor() ([]byte, []int) {
	return file_watermark_proto_rawDescGZIP(), []int{9}
}

func (x *TableFreshnessResponse) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *TableFreshnessResponse) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *TableFreshnessResponse) GetFreshnessP50() int64 {
	if x != nil {
		return x.FreshnessP50
	}
	return 0
}

func (x *TableFreshnessResponse) GetFreshnessP95() int64 {
	if x != nil {
		return x.FreshnessP95
	}
	return 0
}

func (x *TableFreshnessResponse) GetFreshnessP99() int64 {
	if x != nil {
		return x.FreshnessP99
	}
	return 0
}

func (x *TableFreshnessResponse) GetServiceWatermarks() []*ServiceWatermark {
	if x != nil {
		return x.ServiceWatermarks
	}
	return nil
}

func (x *TableFreshnessResponse) GetLastUpdate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

type ServiceWatermark struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Service       string                 `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	WatermarkMs   int64                  `protobuf:"varint,2,opt,name=watermark_ms,json=watermarkMs,proto3" json:"watermark_ms,omitempty"`
	FreshnessMs   int64                  `protobuf:"varint,3,opt,name=freshness_ms,json=freshnessMs,proto3" json:"freshness_ms,omitempty"`
	ReportedAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=reported_at,json=reportedAt,proto3" json:"reported_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceWatermark) Reset() {
	*x = ServiceWatermark{}
	mi := &file_watermark_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceWatermark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceWatermark) ProtoMessage() {}

func (x *ServiceWatermark) ProtoReflect() protoreflect.Message {
	mi := &file_watermark_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceWatermark.ProtoReflect.Descriptor instead.
func (*ServiceWatermark) Descriptor() ([]byte, []int) {
	return file_watermark_proto_rawDescGZIP(), []int{10}
}

func (x *ServiceWatermark) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ServiceWatermark) GetWatermarkMs() int64 {
	if x != nil {
		return x.WatermarkMs
	}
	return 0
}

func (x *ServiceWatermark) GetFreshnessMs() int64 {
	if x != nil {
		return x.FreshnessMs
	}
	return 0
}

func (x *ServiceWatermark) GetReportedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportedAt
	}
	return nil
}

type GetSLOViolationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"` // Max violations to return
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSLOViolationsRequest) Reset() {
	*x = GetSLOViolationsRequest{}
	mi := &file_watermark_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSLOViolationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSLOViolationsRequest) ProtoMessage() {}

func (x *GetSLOViolationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_watermark_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSLOViolationsRequest.ProtoReflect.Descriptor instead.
func (*GetSLOViolationsRequest) Descriptor() ([]byte, []int) {
	return file_watermark_proto_rawDescGZIP(), []int{11}
}

func (x *GetSLOViolationsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SLOViolationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Violations    []*SLOViolation        `protobuf:"bytes,1,rep,name=violations,proto3" json:"violations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SLOViolationsResponse) Reset() {
	*x = SLOViolationsResponse{}
	mi := &file_watermark_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SLOViolationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLOViolationsResponse) ProtoMessage() {}

func (x *SLOViolationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_watermark_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLOViolationsResponse.ProtoReflect.Descriptor instead.
func (*SLOViolationsResponse) Descriptor() ([]byte, []int) {
	return file_watermark_proto_rawDescGZIP(), []int{12}
}

func (x *SLOViolationsResponse) GetViolations() []*SLOViolation {
	if x != nil {
		return x.Violations
	}
	return nil
}

type SLOViolation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Table         string                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	TargetMs      int64                  `protobuf:"varint,3,opt,name=target_ms,json=targetMs,proto3" json:"target_ms,omitempty"`
	CurrentP99    int64                  `protobuf:"varint,4,opt,name=current_p99,json=currentP99,proto3" json:"current_p99,omitempty"`
	Severity      float32                `protobuf:"fixed32,5,opt,name=severity,proto3" json:"severity,omitempty"` // 0-1, where 1 is most severe
	DetectedAt    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=detected_at,json=detectedAt,proto3" json:"detected_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SLOViolation) Reset() {
	*x = SLOViolation{}
	mi := &file_watermark_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SLOViolation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLOViolation) ProtoMessage() {}

func (x *SLOViolation) ProtoReflect() protoreflect.Message {
	mi := &file_watermark_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLOViolation.ProtoReflect.Descriptor instead.
func (*SLOViolation) Descriptor() ([]byte, []int) {
	return file_watermark_proto_rawDescGZIP(), []int{13}
}

func (x *SLOViolation) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SLOViolation) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *SLOViolation) GetTargetMs() int64 {
	if x != nil {
		return x.TargetMs
	}
	return 0
}

func (x *SLOViolation) GetCurrentP99() int64 {
	if x != nil {
		return x.CurrentP99
	}
	return 0
}

func (x *SLOViolation) GetSeverity() float32 {
	if x != nil {
		return x.Severity
	}
	return 0
}

func (x *SLOViolation) GetDetectedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DetectedAt
	}
	return nil
}

var File_watermark_proto protoreflect.FileDescriptor

const file_watermark_proto_rawDesc = "" +
	"\n" +
	"\x0fwatermark.proto\x12\x11truenow.watermark\x1a\x1fgoogle/protobuf/timestamp.proto\"\xce\x02\n" +
	"\x16ReportWatermarkRequest\x12\x18\n" +
	"\aservice\x18\x01 \x01(\tR\aservice\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x14\n" +
	"\x05table\x18\x03 \x01(\tR\x05table\x12!\n" +
	"\fwatermark_ms\x18\x04 \x01(\x03R\vwatermarkMs\x129\n" +
	"\n" +
	"event_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\teventTime\x12M\n" +
	"\x06labels\x18\x06 \x03(\v25.truenow.watermark.ReportWatermarkRequest.LabelsEntryR\x06labels\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"M\n" +
	"\x17ReportWatermarkResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"i\n" +
	"\x1cBatchReportWatermarksRequest\x12I\n" +
	"\n" +
	"watermarks\x18\x01 \x03(\v2).truenow.watermark.ReportWatermarkRequestR\n" +
	"watermarks\"m\n" +
	"\x1dBatchReportWatermarksResponse\x12\x1c\n" +
	"\tsucceeded\x18\x01 \x01(\x05R\tsucceeded\x12\x16\n" +
	"\x06failed\x18\x02 \x01(\x05R\x06failed\x12\x16\n" +
	"\x06errors\x18\x03 \x03(\tR\x06errors\"r\n" +
	"\x17StreamWatermarksRequest\x12\x1e\n" +
	"\n" +
	"namespaces\x18\x01 \x03(\tR\n" +
	"namespaces\x12\x16\n" +
	"\x06tables\x18\x02 \x03(\tR\x06tables\x12\x1f\n" +
	"\vinterval_ms\x18\x03 \x01(\x05R\n" +
	"intervalMs\"\xdf\x01\n" +
	"\x0fWatermarkUpdate\x12\x18\n" +
	"\aservice\x18\x01 \x01(\tR\aservice\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x14\n" +
	"\x05table\x18\x03 \x01(\tR\x05table\x12!\n" +
	"\fwatermark_ms\x18\x04 \x01(\x03R\vwatermarkMs\x12!\n" +
	"\ffreshness_ms\x18\x05 \x01(\x03R\vfreshnessMs\x128\n" +
	"\ttimestamp\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"\x1b\n" +
	"\x19GetGlobalFreshnessRequest\"\xb2\x02\n" +
	"\x17GlobalFreshnessResponse\x120\n" +
	"\x14global_freshness_p50\x18\x01 \x01(\x03R\x12globalFreshnessP50\x120\n" +
	"\x14global_freshness_p95\x18\x02 \x01(\x03R\x12globalFreshnessP95\x120\n" +
	"\x14global_freshness_p99\x18\x03 \x01(\x03R\x12globalFreshnessP99\x12!\n" +
	"\ftotal_tables\x18\x04 \x01(\x05R\vtotalTables\x12!\n" +
	"\fstale_tables\x18\x05 \x01(\x05R\vstaleTables\x12;\n" +
	"\vlast_update\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"lastUpdate\"N\n" +
	"\x18GetTableFreshnessRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x14\n" +
	"\x05table\x18\x02 \x01(\tR\x05table\"\xcc\x02\n" +
	"\x16TableFreshnessResponse\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x14\n" +
	"\x05table\x18\x02 \x01(\tR\x05table\x12#\n" +
	"\rfreshness_p50\x18\x03 \x01(\x03R\ffreshnessP50\x12#\n" +
	"\rfreshness_p95\x18\x04 \x01(\x03R\ffreshnessP95\x12#\n" +
	"\rfreshness_p99\x18\x05 \x01(\x03R\ffreshnessP99\x12R\n" +
	"\x12service_watermarks\x18\x06 \x03(\v2#.truenow.watermark.ServiceWatermarkR\x11serviceWatermarks\x12;\n" +
	"\vlast_update\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"lastUpdate\"\xaf\x01\n" +
	"\x10ServiceWatermark\x12\x18\n" +
	"\aservice\x18\x01 \x01(\tR\aservice\x12!\n" +
	"\fwatermark_ms\x18\x02 \x01(\x03R\vwatermarkMs\x12!\n" +
	"\ffreshness_ms\x18\x03 \x01(\x03R\vfreshnessMs\x12;\n" +
	"\vreported_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"reportedAt\"/\n" +
	"\x17GetSLOViolationsRequest\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\x05R\x05limit\"X\n" +
	"\x15SLOViolationsResponse\x12?\n" +
	"\n" +
	"violations\x18\x01 \x03(\v2\x1f.truenow.watermark.SLOViolationR\n" +
	"violations\"\xd9\x01\n" +
	"\fSLOViolation\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x14\n" +
	"\x05table\x18\x02 \x01(\tR\x05table\x12\x1b\n" +
	"\ttarget_ms\x18\x03 \x01(\x03R\btargetMs\x12\x1f\n" +
	"\vcurrent_p99\x18\x04 \x01(\x03R\n" +
	"currentP99\x12\x1a\n" +
	"\bseverity\x18\x05 \x01(\x02R\bseverity\x12;\n" +
	"\vdetected_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"detectedAt2\xa5\x05\n" +
	"\x10WatermarkService\x12h\n" +
	"\x0fReportWatermark\x12).truenow.watermark.ReportWatermarkRequest\x1a*.truenow.watermark.ReportWatermarkResponse\x12d\n" +
	"\x10StreamWatermarks\x12*.truenow.watermark.StreamWatermarksRequest\x1a\".truenow.watermark.WatermarkUpdate0\x01\x12n\n" +
	"\x12GetGlobalFreshness\x12,.truenow.watermark.GetGlobalFreshnessRequest\x1a*.truenow.watermark.GlobalFreshnessResponse\x12k\n" +
	"\x11GetTableFreshness\x12+.truenow.watermark.GetTableFreshnessRequest\x1a).truenow.watermark.TableFreshnessResponse\x12h\n" +
	"\x10GetSLOViolations\x12*.truenow.watermark.GetSLOViolationsRequest\x1a(.truenow.watermark.SLOViolationsResponse\x12z\n" +
	"\x15BatchReportWatermarks\x12/.truenow.watermark.BatchReportWatermarksRequest\x1a0.truenow.watermark.BatchReportWatermarksResponseB<Z:github.com/Milad-Afdasta/TrueNow/proto/watermark;watermarkb\x06proto3"

var (
	file_watermark_proto_rawDescOnce sync.Once
	file_watermark_proto_rawDescData []byte
)

func file_watermark_proto_rawDescGZIP() []byte {
	file_watermark_proto_rawDescOnce.Do(func() {
		file_watermark_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_watermark_proto_rawDesc), len(file_watermark_proto_rawDesc)))
	})
	return file_watermark_proto_rawDescData
}

var file_watermark_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_watermark_proto_goTypes = []any{
	(*ReportWatermarkRequest)(nil),        // 0: truenow.watermark.ReportWatermarkRequest
	(*ReportWatermarkResponse)(nil),       // 1: truenow.watermark.ReportWatermarkResponse
	(*BatchReportWatermarksRequest)(nil),  // 2: truenow.watermark.BatchReportWatermarksRequest
	(*BatchReportWatermarksResponse)(nil), // 3: truenow.watermark.BatchReportWatermarksResponse
	(*StreamWatermarksRequest)(nil),       // 4: truenow.watermark.StreamWatermarksRequest
	(*WatermarkUpdate)(nil),               // 5: truenow.watermark.WatermarkUpdate
	(*GetGlobalFreshnessRequest)(nil),     // 6: truenow.watermark.GetGlobalFreshnessRequest
	(*GlobalFreshnessResponse)(nil),       // 7: truenow.watermark.GlobalFreshnessResponse
	(*GetTableFreshnessRequest)(nil),      // 8: truenow.watermark.GetTableFreshnessRequest
	(*TableFreshnessResponse)(nil),        // 9: truenow.watermark.TableFreshnessResponse
	(*ServiceWatermark)(nil),              // 10: truenow.watermark.ServiceWatermark
	(*GetSLOViolationsRequest)(nil),       // 11: truenow.watermark.GetSLOViolationsRequest
	(*SLOViolationsResponse)(nil),         // 12: truenow.watermark.SLOViolationsResponse
	(*SLOViolation)(nil),                  // 13: truenow.watermark.SLOViolation
	nil,                                   // 14: truenow.watermark.ReportWatermarkRequest.LabelsEntry
	(*timestamppb.Timestamp)(nil),         // 15: google.protobuf.Timestamp
}
var file_watermark_proto_depIdxs = []int32{
	15, // 0: truenow.watermark.ReportWatermarkRequest.event_time:type_name -> google.protobuf.Timestamp
	14, // 1: truenow.watermark.ReportWatermarkRequest.labels:type_name -> truenow.watermark.ReportWatermarkRequest.LabelsEntry
	0,  // 2: truenow.watermark.BatchReportWatermarksRequest.watermarks:type_name -> truenow.watermark.ReportWatermarkRequest
	15, // 3: truenow.watermark.WatermarkUpdate.timestamp:type_name -> google.protobuf.Timestamp
	15, // 4: truenow.watermark.GlobalFreshnessResponse.last_update:type_name -> google.protobuf.Timestamp
	10, // 5: truenow.watermark.TableFreshnessResponse.service_watermarks:type_name -> truenow.watermark.ServiceWatermark
	15, // 6: truenow.watermark.TableFreshnessResponse.last_update:type_name -> google.protobuf.Timestamp
	15, // 7: truenow.watermark.ServiceWatermark.reported_at:type_name -> google.protobuf.Timestamp
	13, // 8: truenow.watermark.SLOViolationsResponse.violations:type_name -> truenow.watermark.SLOViolation
	15, // 9: truenow.watermark.SLOViolation.detected_at:type_name -> google.protobuf.Timestamp
	0,  // 10: truenow.watermark.WatermarkService.ReportWatermark:input_type -> truenow.watermark.ReportWatermarkRequest
	4,  // 11: truenow.watermark.WatermarkService.StreamWatermarks:input_type -> truenow.watermark.StreamWatermarksRequest
	6,  // 12: truenow.watermark.WatermarkService.GetGlobalFreshness:input_type -> truenow.watermark.GetGlobalFreshnessRequest
	8,  // 13: truenow.watermark.WatermarkService.GetTableFreshness:input_type -> truenow.watermark.GetTableFreshnessRequest
	11, // 14: truenow.watermark.WatermarkService.GetSLOViolations:input_type -> truenow.watermark.GetSLOViolationsRequest
	2,  // 15: truenow.watermark.WatermarkService.BatchReportWatermarks:input_type -> truenow.watermark.BatchReportWatermarksRequest
	1,  // 16: truenow.watermark.WatermarkService.ReportWatermark:output_type -> truenow.watermark.ReportWatermarkResponse
	5,  // 17: truenow.watermark.WatermarkService.StreamWatermarks:output_type -> truenow.watermark.WatermarkUpdate
	7,  // 18: truenow.watermark.WatermarkService.GetGlobalFreshness:output_type -> truenow.watermark.GlobalFreshnessResponse
	9,  // 19: truenow.watermark.WatermarkService.GetTableFreshness:output_type -> truenow.watermark.TableFreshnessResponse
	12, // 20: truenow.watermark.WatermarkService.GetSLOViolations:output_type -> truenow.watermark.SLOViolationsResponse
	3,  // 21: truenow.watermark.WatermarkService.BatchReportWatermarks:output_type -> truenow.watermark.BatchReportWatermarksResponse
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_watermark_proto_init() }
func file_watermark_proto_init() {
	if File_watermark_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_watermark_proto_rawDesc), len(file_watermark_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_watermark_proto_goTypes,
		DependencyIndexes: file_watermark_proto_depIdxs,
		MessageInfos:      file_watermark_proto_msgTypes,
	}.Build()
	File_watermark_proto = out.File
	file_watermark_proto_goTypes = nil
	file_watermark_proto_depIdxs = nil
}
