// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: rebalancer.proto

package rebalancer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RebalancerService_GetShardAssignments_FullMethodName = "/truenow.rebalancer.RebalancerService/GetShardAssignments"
	RebalancerService_StreamShardUpdates_FullMethodName  = "/truenow.rebalancer.RebalancerService/StreamShardUpdates"
	RebalancerService_GetLoadDistribution_FullMethodName = "/truenow.rebalancer.RebalancerService/GetLoadDistribution"
	RebalancerService_BatchReportLoad_FullMethodName     = "/truenow.rebalancer.RebalancerService/BatchReportLoad"
	RebalancerService_GetHotspots_FullMethodName         = "/truenow.rebalancer.RebalancerService/GetHotspots"
	RebalancerService_TriggerRebalance_FullMethodName    = "/truenow.rebalancer.RebalancerService/TriggerRebalance"
	RebalancerService_GetRebalanceHistory_FullMethodName = "/truenow.rebalancer.RebalancerService/GetRebalanceHistory"
)

// RebalancerServiceClient is the client API for RebalancerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RebalancerService manages load distribution at 1B QPS scale
type RebalancerServiceClient interface {
	// Get current shard assignments
	GetShardAssignments(ctx context.Context, in *GetShardAssignmentsRequest, opts ...grpc.CallOption) (*ShardAssignmentsResponse, error)
	// Stream shard assignment updates in real-time
	StreamShardUpdates(ctx context.Context, in *StreamShardUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ShardUpdate], error)
	// Get load distribution metrics
	GetLoadDistribution(ctx context.Context, in *GetLoadDistributionRequest, opts ...grpc.CallOption) (*LoadDistributionResponse, error)
	// Report load from a shard (batch for efficiency)
	BatchReportLoad(ctx context.Context, in *BatchReportLoadRequest, opts ...grpc.CallOption) (*BatchReportLoadResponse, error)
	// Get hotspot detection results
	GetHotspots(ctx context.Context, in *GetHotspotsRequest, opts ...grpc.CallOption) (*HotspotsResponse, error)
	// Trigger manual rebalancing
	TriggerRebalance(ctx context.Context, in *TriggerRebalanceRequest, opts ...grpc.CallOption) (*TriggerRebalanceResponse, error)
	// Get rebalancing history
	GetRebalanceHistory(ctx context.Context, in *GetRebalanceHistoryRequest, opts ...grpc.CallOption) (*RebalanceHistoryResponse, error)
}

type rebalancerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRebalancerServiceClient(cc grpc.ClientConnInterface) RebalancerServiceClient {
	return &rebalancerServiceClient{cc}
}

func (c *rebalancerServiceClient) GetShardAssignments(ctx context.Context, in *GetShardAssignmentsRequest, opts ...grpc.CallOption) (*ShardAssignmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShardAssignmentsResponse)
	err := c.cc.Invoke(ctx, RebalancerService_GetShardAssignments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rebalancerServiceClient) StreamShardUpdates(ctx context.Context, in *StreamShardUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ShardUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RebalancerService_ServiceDesc.Streams[0], RebalancerService_StreamShardUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamShardUpdatesRequest, ShardUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RebalancerService_StreamShardUpdatesClient = grpc.ServerStreamingClient[ShardUpdate]

func (c *rebalancerServiceClient) GetLoadDistribution(ctx context.Context, in *GetLoadDistributionRequest, opts ...grpc.CallOption) (*LoadDistributionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadDistributionResponse)
	err := c.cc.Invoke(ctx, RebalancerService_GetLoadDistribution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rebalancerServiceClient) BatchReportLoad(ctx context.Context, in *BatchReportLoadRequest, opts ...grpc.CallOption) (*BatchReportLoadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchReportLoadResponse)
	err := c.cc.Invoke(ctx, RebalancerService_BatchReportLoad_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rebalancerServiceClient) GetHotspots(ctx context.Context, in *GetHotspotsRequest, opts ...grpc.CallOption) (*HotspotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HotspotsResponse)
	err := c.cc.Invoke(ctx, RebalancerService_GetHotspots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rebalancerServiceClient) TriggerRebalance(ctx context.Context, in *TriggerRebalanceRequest, opts ...grpc.CallOption) (*TriggerRebalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerRebalanceResponse)
	err := c.cc.Invoke(ctx, RebalancerService_TriggerRebalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rebalancerServiceClient) GetRebalanceHistory(ctx context.Context, in *GetRebalanceHistoryRequest, opts ...grpc.CallOption) (*RebalanceHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RebalanceHistoryResponse)
	err := c.cc.Invoke(ctx, RebalancerService_GetRebalanceHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RebalancerServiceServer is the server API for RebalancerService service.
// All implementations must embed UnimplementedRebalancerServiceServer
// for forward compatibility.
//
// RebalancerService manages load distribution at 1B QPS scale
type RebalancerServiceServer interface {
	// Get current shard assignments
	GetShardAssignments(context.Context, *GetShardAssignmentsRequest) (*ShardAssignmentsResponse, error)
	// Stream shard assignment updates in real-time
	StreamShardUpdates(*StreamShardUpdatesRequest, grpc.ServerStreamingServer[ShardUpdate]) error
	// Get load distribution metrics
	GetLoadDistribution(context.Context, *GetLoadDistributionRequest) (*LoadDistributionResponse, error)
	// Report load from a shard (batch for efficiency)
	BatchReportLoad(context.Context, *BatchReportLoadRequest) (*BatchReportLoadResponse, error)
	// Get hotspot detection results
	GetHotspots(context.Context, *GetHotspotsRequest) (*HotspotsResponse, error)
	// Trigger manual rebalancing
	TriggerRebalance(context.Context, *TriggerRebalanceRequest) (*TriggerRebalanceResponse, error)
	// Get rebalancing history
	GetRebalanceHistory(context.Context, *GetRebalanceHistoryRequest) (*RebalanceHistoryResponse, error)
	mustEmbedUnimplementedRebalancerServiceServer()
}

// UnimplementedRebalancerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRebalancerServiceServer struct{}

func (UnimplementedRebalancerServiceServer) GetShardAssignments(context.Context, *GetShardAssignmentsRequest) (*ShardAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShardAssignments not implemented")
}
func (UnimplementedRebalancerServiceServer) StreamShardUpdates(*StreamShardUpdatesRequest, grpc.ServerStreamingServer[ShardUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StreamShardUpdates not implemented")
}
func (UnimplementedRebalancerServiceServer) GetLoadDistribution(context.Context, *GetLoadDistributionRequest) (*LoadDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoadDistribution not implemented")
}
func (UnimplementedRebalancerServiceServer) BatchReportLoad(context.Context, *BatchReportLoadRequest) (*BatchReportLoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchReportLoad not implemented")
}
func (UnimplementedRebalancerServiceServer) GetHotspots(context.Context, *GetHotspotsRequest) (*HotspotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotspots not implemented")
}
func (UnimplementedRebalancerServiceServer) TriggerRebalance(context.Context, *TriggerRebalanceRequest) (*TriggerRebalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerRebalance not implemented")
}
func (UnimplementedRebalancerServiceServer) GetRebalanceHistory(context.Context, *GetRebalanceHistoryRequest) (*RebalanceHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRebalanceHistory not implemented")
}
func (UnimplementedRebalancerServiceServer) mustEmbedUnimplementedRebalancerServiceServer() {}
func (UnimplementedRebalancerServiceServer) testEmbeddedByValue()                           {}

// UnsafeRebalancerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RebalancerServiceServer will
// result in compilation errors.
type UnsafeRebalancerServiceServer interface {
	mustEmbedUnimplementedRebalancerServiceServer()
}

func RegisterRebalancerServiceServer(s grpc.ServiceRegistrar, srv RebalancerServiceServer) {
	// If the following call pancis, it indicates UnimplementedRebalancerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RebalancerService_ServiceDesc, srv)
}

func _RebalancerService_GetShardAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShardAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RebalancerServiceServer).GetShardAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RebalancerService_GetShardAssignments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RebalancerServiceServer).GetShardAssignments(ctx, req.(*GetShardAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RebalancerService_StreamShardUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamShardUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RebalancerServiceServer).StreamShardUpdates(m, &grpc.GenericServerStream[StreamShardUpdatesRequest, ShardUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RebalancerService_StreamShardUpdatesServer = grpc.ServerStreamingServer[ShardUpdate]

func _RebalancerService_GetLoadDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoadDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RebalancerServiceServer).GetLoadDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RebalancerService_GetLoadDistribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RebalancerServiceServer).GetLoadDistribution(ctx, req.(*GetLoadDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RebalancerService_BatchReportLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchReportLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RebalancerServiceServer).BatchReportLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RebalancerService_BatchReportLoad_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RebalancerServiceServer).BatchReportLoad(ctx, req.(*BatchReportLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RebalancerService_GetHotspots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotspotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RebalancerServiceServer).GetHotspots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RebalancerService_GetHotspots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RebalancerServiceServer).GetHotspots(ctx, req.(*GetHotspotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RebalancerService_TriggerRebalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRebalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RebalancerServiceServer).TriggerRebalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RebalancerService_TriggerRebalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RebalancerServiceServer).TriggerRebalance(ctx, req.(*TriggerRebalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RebalancerService_GetRebalanceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRebalanceHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RebalancerServiceServer).GetRebalanceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RebalancerService_GetRebalanceHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RebalancerServiceServer).GetRebalanceHistory(ctx, req.(*GetRebalanceHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RebalancerService_ServiceDesc is the grpc.ServiceDesc for RebalancerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RebalancerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "truenow.rebalancer.RebalancerService",
	HandlerType: (*RebalancerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShardAssignments",
			Handler:    _RebalancerService_GetShardAssignments_Handler,
		},
		{
			MethodName: "GetLoadDistribution",
			Handler:    _RebalancerService_GetLoadDistribution_Handler,
		},
		{
			MethodName: "BatchReportLoad",
			Handler:    _RebalancerService_BatchReportLoad_Handler,
		},
		{
			MethodName: "GetHotspots",
			Handler:    _RebalancerService_GetHotspots_Handler,
		},
		{
			MethodName: "TriggerRebalance",
			Handler:    _RebalancerService_TriggerRebalance_Handler,
		},
		{
			MethodName: "GetRebalanceHistory",
			Handler:    _RebalancerService_GetRebalanceHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamShardUpdates",
			Handler:       _RebalancerService_StreamShardUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rebalancer.proto",
}
